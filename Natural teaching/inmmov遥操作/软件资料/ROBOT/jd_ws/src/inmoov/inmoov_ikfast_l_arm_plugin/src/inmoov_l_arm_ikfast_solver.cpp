/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-05-26 13:45:05.921365
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15;
x0=IKsin(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=IKcos(j[0]);
x5=IKcos(j[1]);
x6=((0.0144)*x3);
x7=((0.2885)*x2);
x8=((0.0144)*x1);
x9=((0.01)*x0);
x10=((0.2885)*x3);
x11=((1.0)*x2);
x12=(x4*x5);
x13=(x3*x5);
x14=(x1*x4);
x15=(x2*x5);
eetrans[0]=((-0.078)+((x0*x8))+(((0.0278)*x0))+(((-1.0)*x0*x10))+(((0.01)*x5)));
eetrans[1]=((((0.2835)*x2))+(((-0.0278)*x12))+((x1*x7))+(((-1.0)*x12*x8))+((x4*x9))+((x2*x6))+((x10*x12)));
eetrans[2]=((-0.04)+(((-0.0278)*x15))+(((-1.0)*x4*x6))+(((-0.2835)*x4))+((x2*x9))+(((-0.2885)*x14))+(((-1.0)*x15*x8))+((x13*x7)));
eerot[0]=(x0*x3);
eerot[1]=((((-1.0)*x12*x3))+(((-1.0)*x1*x11)));
eerot[2]=((((-1.0)*x11*x13))+x14);
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 4; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x46000005; }

class IKSolver {
public:
IkReal j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=((-1.0)*r02);
new_px=((-0.04)+(((-1.0)*pz)));
new_r01=r01;
new_py=py;
new_r02=r00;
new_pz=((0.078)+px);
r00 = new_r00; r01 = new_r01; r02 = new_r02; 
IkReal new_pdotd = new_px*new_r00+new_py*new_r01+new_pz*new_r02;
px = new_px-new_pdotd * new_r00; py = new_py- new_pdotd * new_r01; pz = new_pz - new_pdotd * new_r02;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal verifyeval[1];
verifyeval[0]=((1.0)+(((-1.0)*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*(r01*r01))));
if( IKabs(verifyeval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
IkReal x16=(pz*r01);
IkReal x17=(py*r02);
IkReal x18=((((-1.0)*x17))+x16);
IkReal x19=((((-1.0)*x16))+x17);
IkReal x20=((((-2.0)*pz*r00))+(((2.0)*px*r02)));
IkReal gconst0=x18;
IkReal gconst1=x18;
IkReal gconst2=x18;
IkReal gconst3=x18;
IkReal gconst4=x20;
IkReal gconst5=x20;
IkReal gconst6=x20;
IkReal gconst7=x20;
IkReal gconst8=x19;
IkReal gconst9=x19;
IkReal gconst10=x19;
IkReal gconst11=x19;
IkReal x21=pz*pz;
IkReal x22=r02*r02;
IkReal x23=r01*r01;
IkReal x24=r00*r00;
IkReal x25=px*px;
IkReal x26=py*py;
IkReal x27=(r00*r01);
IkReal x28=((16.0)*py);
IkReal x29=((16.0)*x21);
IkReal x30=(pz*r00*r02);
IkReal x31=(py*pz*r01*r02);
IkReal x32=(x22*x26);
IkReal x33=(x22*x25);
IkReal x34=(x21*x23);
IkReal x35=(((px*x22*x28))+((x27*x29)));
IkReal x36=(((x28*x30))+(((0.0016)*x27))+(((16.0)*px*pz*r01*r02)));
j9eval[0]=((((0.5)*(IKabs(((0.0024)+(((64.0)*px*x30))+(((-0.0032)*x23))+(((-1.0)*pz*r01*r02*x28))+(((0.0008)*x24))+(((-32.0)*x21*x24))+(((8.0)*x32))+(((8.0)*x34))+(((-32.0)*x33)))))))+(IKabs(((((-1.0)*x36))+x35)))+(IKabs(((((-1.0)*x35))+x36)))+(((0.5)*(IKabs(((0.0004)+(((-0.0004)*x24))+(((-4.0)*x32))+(((-4.0)*x34))+(((8.0)*x31)))))))+(IKabs(((0.0016)+(((-16.0)*x33))+(((32.0)*px*x30))+(((-0.0016)*x23))+(((-1.0)*x24*x29))))));
if( IKabs(j9eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j9, j10, j11, j12]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x37=r00*r00;
IkReal x38=r01*r01;
IkReal x39=(gconst11*gconst5);
IkReal x40=((1.0)*gconst6);
IkReal x41=(gconst3*gconst4);
IkReal x42=((1.0)*gconst9);
IkReal x43=(gconst3*gconst8);
IkReal x44=(gconst6*gconst9);
IkReal x45=((2.0)*gconst8);
IkReal x46=(gconst3*gconst5);
IkReal x47=((4.0)*r01);
IkReal x48=(gconst10*gconst8);
IkReal x49=(gconst1*gconst3);
IkReal x50=(gconst0*gconst6);
IkReal x51=(gconst11*gconst4);
IkReal x52=(gconst2*gconst4);
IkReal x53=((1.0)*gconst10);
IkReal x54=(gconst7*gconst8);
IkReal x55=(gconst11*gconst9);
IkReal x56=((2.0)*gconst7);
IkReal x57=(gconst1*gconst7);
IkReal x58=(gconst10*gconst4);
IkReal x59=((2.0)*r00);
IkReal x60=(gconst5*gconst7);
IkReal x61=(gconst11*gconst8);
IkReal x62=(gconst7*gconst9);
IkReal x63=((2.0)*gconst1);
IkReal x64=((1.0)*gconst2);
IkReal x65=(gconst5*gconst6);
IkReal x66=(gconst1*gconst2);
IkReal x67=(gconst0*gconst3);
IkReal x68=(gconst6*gconst8);
IkReal x69=(gconst0*gconst11);
IkReal x70=(gconst1*gconst6);
IkReal x71=(gconst3*gconst9);
IkReal x72=(gconst2*gconst9);
IkReal x73=((1.0)*gconst1);
IkReal x74=(gconst2*gconst8);
IkReal x75=((2.0)*gconst5);
IkReal x76=(gconst0*gconst10);
IkReal x77=((2.0)*gconst2);
IkReal x78=(gconst0*gconst2);
IkReal x79=(gconst4*gconst6);
IkReal x80=(gconst10*gconst5);
IkReal x81=(gconst4*gconst7);
IkReal x82=(gconst0*gconst7);
IkReal x83=(gconst10*gconst9);
IkReal x84=(gconst2*gconst5);
IkReal x85=(gconst1*gconst11);
IkReal x86=((0.0016)*r00*r01);
IkReal x87=((1.0)*x39);
IkReal x88=((1.0)*x51);
IkReal x89=(gconst8*x40);
IkReal x90=(gconst9*x40);
IkReal x91=(gconst5*x53);
IkReal x92=(gconst4*x53);
IkReal x93=(gconst7*x42);
IkReal x94=((1.0)*x54);
IkReal x95=(gconst0*x53);
IkReal x96=((1.0)*x69);
IkReal x97=(gconst11*x73);
IkReal x98=(gconst1*x53);
IkReal x99=((1.0)*x60);
IkReal x100=(gconst5*x40);
IkReal x101=(gconst2*x42);
IkReal x102=(gconst8*x64);
IkReal x103=((1.0)*x81);
IkReal x104=(gconst4*x40);
IkReal x105=(gconst3*x42);
IkReal x106=((1.0)*x43);
IkReal x107=((0.0016)*x38);
IkReal x108=(gconst5*x64);
IkReal x109=((1.0)*x52);
IkReal x110=((1.0)*x46);
IkReal x111=((1.0)*x41);
IkReal x112=(gconst0*x40);
IkReal x113=((1.0)*x82);
IkReal x114=((1.0)*x57);
IkReal x115=(gconst1*x40);
IkReal x116=(r00*x47);
IkReal x117=(gconst0*x37);
IkReal x118=(gconst7*x37);
IkReal x119=((4.0)*x38);
IkReal x120=((2.0)*x37);
IkReal x121=(gconst11*x37);
IkReal x122=((1.0)*x37);
IkReal x123=(gconst8*x37);
IkReal x124=(gconst10*x37);
IkReal x125=(gconst4*x37);
IkReal x126=(x47*x48);
IkReal x127=(x47*x55);
IkReal x128=(x37*x51);
IkReal x129=(x58*x59);
IkReal x130=(gconst6*r00*x45);
IkReal x131=(x47*x79);
IkReal x132=(x37*x54);
IkReal x133=(x37*x80);
IkReal x134=(x47*x74);
IkReal x135=(x37*x44);
IkReal x136=(x47*x76);
IkReal x137=(x47*x60);
IkReal x138=(gconst9*r00*x56);
IkReal x139=(x47*x71);
IkReal x140=(x47*x85);
IkReal x141=(x39*x59);
IkReal x142=(x37*x65);
IkReal x143=(x59*x79);
IkReal x144=(x37*x69);
IkReal x145=(gconst2*r00*x45);
IkReal x146=(gconst1*x124);
IkReal x147=(x37*x43);
IkReal x148=(x59*x76);
IkReal x149=(x37*x72);
IkReal x150=(x37*x81);
IkReal x151=(x59*x85);
IkReal x152=(x59*x71);
IkReal x153=(gconst5*r00*x56);
IkReal x154=(x52*x59);
IkReal x155=(x37*x82);
IkReal x156=(x50*x59);
IkReal x157=(x37*x41);
IkReal x158=(x47*x78);
IkReal x159=(x37*x84);
IkReal x160=(x37*x70);
IkReal x161=(x46*x59);
IkReal x162=(gconst1*r00*x56);
IkReal x163=(x47*x49);
IkReal x164=(x116*x61);
IkReal x165=(x116*x83);
IkReal x166=(x116*x48);
IkReal x167=(x116*x55);
IkReal x168=(x116*x72);
IkReal x169=(gconst1*gconst10*x116);
IkReal x170=(x116*x43);
IkReal x171=(x116*x81);
IkReal x172=(x116*x65);
IkReal x173=(x116*x69);
IkReal x174=(x116*x79);
IkReal x175=(x37*x93);
IkReal x176=(x116*x74);
IkReal x177=(x37*x92);
IkReal x178=(x37*x87);
IkReal x179=(x116*x71);
IkReal x180=(x116*x60);
IkReal x181=(x37*x89);
IkReal x182=(x116*x76);
IkReal x183=(x116*x85);
IkReal x184=(x105*x37);
IkReal x185=(x102*x37);
IkReal x186=(x37*x99);
IkReal x187=(x37*x95);
IkReal x188=(x104*x37);
IkReal x189=(x37*x97);
IkReal x190=(x116*x67);
IkReal x191=(x116*x66);
IkReal x192=(x116*x78);
IkReal x193=(x109*x37);
IkReal x194=(x112*x37);
IkReal x195=(x114*x37);
IkReal x196=(x116*x49);
IkReal x197=(x110*x37);
IkReal x198=(x130+x129);
IkReal x199=(x156+x154);
IkReal x200=(x192+x196);
IkReal x201=(x164+x165);
IkReal x202=(x166+x167);
IkReal x203=(x191+x190);
IkReal x204=(x162+x161+x86);
IkReal x205=(x141+x138+x86);
IkReal x206=(x134+x136+x131);
IkReal x207=(x153+x152+x151);
IkReal x208=(x143+x145+x148);
IkReal x209=(x140+x137+x139);
IkReal x210=(x160+x157+x155+x159);
IkReal x211=(x135+x133+x132+x128);
IkReal x212=((0.0004)+(((-1.0)*x119*(pz*pz)))+(((-0.0004)*x37))+(((-4.0)*(py*py)*(r02*r02)))+(((8.0)*py*pz*r01*r02)));
IkReal x213=((0.0016)+x150+x142+x144+x146+x147+x149);
IkReal x214=(x179+x174+x176+x180+x182+x183);
IkReal x215=(x171+x170+x173+x172+x168+x169);
IkReal x216=(x113+x112+x111+x110+x115+x114+x108+x109+x193+x197+x195+x194);
IkReal x217=(x178+x175+x177+x181+x88+x89+x87+x91+x90+x93+x92+x94);
IkReal x218=(x104+x105+x106+x107+x100+x101+x102+x103+x184+x185+x186+x187+x188+x189+x99+x98+x95+x97+x96);
op[0]=x212;
op[1]=((((-1.0)*x198))+(((-1.0)*x127))+x126+(((-1.0)*x201))+x211+x205+x202+(((-1.0)*x217)));
op[2]=((((-1.0)*x120*x83))+((x120*x55))+(((-1.0)*x39*x47))+(((-1.0)*x119*x55))+(((-1.0)*x47*x62))+(((-1.0)*x208))+(((-1.0)*x116*x54))+(((-1.0)*x116*x51))+(((-2.0)*x55))+x213+x207+(((-1.0)*x119*x48))+(((-2.0)*x83))+((x124*x45))+(((-1.0)*x116*x44))+(((-1.0)*x121*x45))+(((-1.0)*gconst11*x45))+((x119*x83))+((x116*x39))+(((-1.0)*x116*x80))+((x119*x61))+((x47*x58))+(((-1.0)*x218))+((x47*x68))+(((-1.0)*gconst10*x45))+((x116*x58))+((x116*x68))+((x116*x62)));
op[3]=((((-1.0)*gconst7*x45))+(((-1.0)*gconst9*x56))+(((-1.0)*gconst6*x45))+(((-1.0)*gconst10*x75))+(((-1.0)*x120*x51))+((x120*x58))+(((-1.0)*x199))+(((-1.0)*x119*x58))+(((-1.0)*x124*x75))+(((-1.0)*x127))+x126+((gconst6*x37*x45))+(((-1.0)*x119*x39))+(((-1.0)*x202))+(((-1.0)*x209))+(((-1.0)*x119*x62))+(((-1.0)*x119*x68))+(((-2.0)*x58))+(((-2.0)*x51))+((gconst9*x37*x56))+(((-1.0)*x118*x45))+(((-2.0)*x44))+x210+x214+x206+x204+x201+(((-2.0)*x39))+((x120*x39))+((x119*x80))+((x119*x44))+(((-1.0)*x216))+(((-1.0)*x215))+(((-1.0)*x120*x44))+((x119*x51))+((x119*x54)));
op[4]=((0.0024)+(((4.0)*gconst6*gconst9*r00*r01))+(((4.0)*gconst1*gconst7*r00*r01))+(((4.0)*gconst3*gconst5*r00*r01))+(((-4.0)*gconst7*gconst9*r01))+(((-2.0)*gconst11*gconst9*r00))+(((2.0)*gconst2*gconst8*(r00*r00)))+(((2.0)*gconst1*gconst3*r00))+(((-1.0)*gconst1*gconst3*(r00*r00)))+(((4.0)*gconst0*gconst6*r01))+(((-1.0)*gconst11*gconst8))+(((-1.0)*gconst11*gconst9))+(((-2.0)*gconst1*gconst11))+(((-2.0)*gconst1*gconst10))+((gconst0*gconst3*(r00*r00)))+(((4.0)*gconst10*gconst5*r00*r01))+(((-2.0)*gconst3*gconst9))+(((-2.0)*gconst3*gconst8))+(((-2.0)*gconst4*gconst7*(r00*r00)))+(((-4.0)*gconst10*gconst4*r00*r01))+(((4.0)*gconst1*gconst10*(r01*r01)))+(((-2.0)*gconst2*gconst8))+(((-2.0)*gconst2*gconst9))+(((-0.0032)*(r01*r01)))+(((-1.0)*gconst11*gconst9*(r00*r00)))+(((-1.0)*gconst0*gconst3))+(((-1.0)*gconst0*gconst2))+(((4.0)*gconst3*gconst8*(r01*r01)))+(((4.0)*gconst10*gconst4*r01))+(((-2.0)*gconst4*gconst6))+(((-2.0)*gconst4*gconst7))+(((-4.0)*gconst5*gconst7*(r01*r01)))+(((4.0)*gconst2*gconst9*(r01*r01)))+(((2.0)*gconst1*gconst11*(r00*r00)))+(((-2.0)*gconst0*gconst2*r00))+(((-1.0)*gconst10*gconst8*(r00*r00)))+(((-4.0)*gconst11*gconst5*r01))+(((-2.0)*gconst0*gconst11))+(((-2.0)*gconst0*gconst10))+(((-4.0)*gconst7*gconst9*r00*r01))+(((-4.0)*gconst1*gconst6*r00*r01))+(((2.0)*gconst3*gconst9*(r00*r00)))+((gconst1*gconst2*(r00*r00)))+(((-1.0)*gconst10*gconst9))+(((-1.0)*gconst10*gconst8))+(((-2.0)*gconst5*gconst6))+(((-2.0)*gconst5*gconst7))+(((-2.0)*gconst0*gconst11*(r00*r00)))+(((4.0)*gconst2*gconst4*r01))+(((-2.0)*gconst1*gconst10*(r00*r00)))+(((4.0)*gconst6*gconst8*r01))+(((4.0)*gconst5*gconst6*(r01*r01)))+(((4.0)*gconst7*gconst8*r00*r01))+(((-4.0)*gconst6*gconst8*r00*r01))+(((-4.0)*gconst1*gconst7*r01))+(((-4.0)*gconst3*gconst5*r01))+(((-2.0)*gconst5*gconst6*(r00*r00)))+(((-1.0)*gconst1*gconst2))+(((-1.0)*gconst1*gconst3))+(((4.0)*gconst0*gconst11*(r01*r01)))+(((2.0)*gconst4*gconst6*(r00*r00)))+(((4.0)*gconst0*gconst6*r00*r01))+(((-2.0)*gconst2*gconst9*(r00*r00)))+(((-4.0)*gconst11*gconst5*r00*r01))+(((4.0)*gconst4*gconst7*(r01*r01)))+(((-4.0)*gconst0*gconst10*(r01*r01)))+(((0.0008)*(r00*r00)))+(((-4.0)*gconst2*gconst5*r00*r01))+(((-4.0)*gconst3*gconst9*(r01*r01)))+(((4.0)*gconst2*gconst4*r00*r01))+(((-4.0)*gconst3*gconst4*r00*r01))+(((2.0)*gconst0*gconst10*(r00*r00)))+(((-1.0)*gconst0*gconst2*(r00*r00)))+(((2.0)*gconst10*gconst8*r00))+(((-4.0)*gconst0*gconst7*r00*r01))+((gconst10*gconst9*(r00*r00)))+(((4.0)*gconst11*gconst4*r00*r01))+((gconst11*gconst8*(r00*r00)))+(((-4.0)*gconst4*gconst6*(r01*r01)))+(((2.0)*gconst5*gconst7*(r00*r00)))+(((-2.0)*gconst3*gconst8*(r00*r00)))+(((-4.0)*gconst1*gconst11*(r01*r01)))+(((-4.0)*gconst2*gconst8*(r01*r01))));
op[5]=((((-1.0)*gconst1*x56))+(((-1.0)*gconst6*x63))+(((-1.0)*x163))+((x120*x52))+((x120*x50))+(((-1.0)*x117*x56))+(((-1.0)*gconst2*x75))+(((-1.0)*x119*x52))+(((-1.0)*x119*x50))+(((-1.0)*x119*x57))+((gconst1*x37*x56))+x158+x198+(((-1.0)*x205))+(((-1.0)*x203))+(((-1.0)*x209))+(((-2.0)*x50))+(((-2.0)*x52))+(((-2.0)*x46))+(((-2.0)*x41))+((x120*x46))+((x119*x70))+x211+x215+x206+x200+(((-1.0)*x119*x46))+(((-1.0)*gconst2*x37*x75))+((x119*x84))+((x119*x82))+(((-1.0)*gconst0*x56))+((x119*x41))+(((-1.0)*x217))+(((-1.0)*x214))+(((-1.0)*x120*x41))+(((-1.0)*gconst6*x37*x63)));
op[6]=((((-1.0)*x119*x78))+(((-1.0)*gconst2*x37*x63))+(((-1.0)*x120*x67))+((x117*x77))+((x116*x70))+(((-1.0)*gconst2*x63))+(((-2.0)*x67))+(((-1.0)*x207))+(((-1.0)*x116*x57))+(((-1.0)*x116*x50))+(((-1.0)*x116*x52))+(((-2.0)*x49))+((x120*x49))+(((-1.0)*x47*x57))+x213+x208+(((-1.0)*x119*x49))+(((-1.0)*gconst0*x77))+(((-1.0)*x116*x46))+((x116*x84))+((x116*x82))+((x119*x67))+((x119*x66))+((x116*x41))+((x47*x50))+((x47*x52))+(((-1.0)*x218))+(((-1.0)*x46*x47)));
op[7]=((((-1.0)*x163))+x158+x199+(((-1.0)*x200))+(((-1.0)*x204))+x210+x203+(((-1.0)*x216)));
op[8]=x212;
polyroots8(op,zeror,numroots);
IkReal j9array[8], cj9array[8], sj9array[8], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[8]={true,true,true,true,true,true,true,true};
_nj9 = 8;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x219=((100.0)*sj9);
IkReal x220=((100.0)*cj9);
if( IKabs(((((-1.0)*pz*r01*x220))+((py*r02*x220))+((pz*r00*x219))+(((-1.0)*px*r02*x219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj9))+(((-1.0)*cj9*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*r01*x220))+((py*r02*x220))+((pz*r00*x219))+(((-1.0)*px*r02*x219))))+IKsqr(((((-1.0)*r01*sj9))+(((-1.0)*cj9*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*pz*r01*x220))+((py*r02*x220))+((pz*r00*x219))+(((-1.0)*px*r02*x219))), ((((-1.0)*r01*sj9))+(((-1.0)*cj9*r00))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x221=pz*pz;
IkReal x222=cj9*cj9;
IkReal x223=r02*r02;
IkReal x224=IKcos(j11);
IkReal x225=r00*r00;
IkReal x226=px*px;
IkReal x227=((2.0)*r00);
IkReal x228=(pz*r02);
IkReal x229=((1.0)*cj9);
IkReal x230=(cj9*sj9);
IkReal x231=((2.0)*py);
IkReal x232=((1.0)*sj9);
IkReal x233=((1.0)*x223);
IkReal x234=(x221*x225);
evalcond[0]=((((-1.0)*r00*x229))+(((-1.0)*r01*x232))+(((-1.0)*x224)));
evalcond[1]=(((cj9*pz*r01))+(((-1.0)*py*r02*x229))+(((-1.0)*pz*r00*x232))+(((0.01)*(IKsin(j11))))+((px*r02*sj9)));
evalcond[2]=((0.0001)+((r01*x221*x227*x230))+((r01*x222*x228*x231))+(((-1.0)*py*x227*x228*x230))+(((-0.0001)*(x224*x224)))+(((-1.0)*x222*x233*(py*py)))+((x222*x223*x226))+(((-2.0)*px*r01*x228*x230))+((px*x227*x228))+((x222*x234))+((px*x223*x230*x231))+(((-1.0)*x226*x233))+(((-1.0)*x221*x222*(r01*r01)))+(((-1.0)*x234))+(((-1.0)*px*x222*x227*x228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
j10eval[0]=sj11;
j10eval[1]=IKsign(sj11);
j10eval[2]=((IKabs(r02))+(IKabs((((r00*sj9))+(((-1.0)*cj9*r01))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j10, j12]

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x235 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj9))+(((-1.0)*cj9*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x235.valid){
continue;
}
CheckValue<IkReal> x236=IKPowWithIntegerCheck(IKsign(sj11),-1);
if(!x236.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x235.value)+(((1.5707963267949)*(x236.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*r02))+((sj11*(IKsin(j10)))));
evalcond[1]=(((r00*sj9))+(((-1.0)*sj11*(IKcos(j10))))+(((-1.0)*cj9*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j9;
vinfos[0].indices[0] = _ij9[0];
vinfos[0].indices[1] = _ij9[1];
vinfos[0].maxsolutions = _nj9;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j10;
vinfos[1].indices[0] = _ij10[0];
vinfos[1].indices[1] = _ij10[1];
vinfos[1].maxsolutions = _nj10;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j11;
vinfos[2].indices[0] = _ij11[0];
vinfos[2].indices[1] = _ij11[1];
vinfos[2].maxsolutions = _nj11;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j12;
vinfos[3].indices[0] = _ij12[0];
vinfos[3].indices[1] = _ij12[1];
vinfos[3].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}
    }

}

}

} else
{
continue; // verifyAllEquations

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - inmoov (c792a5588ae8cc89f8f4c258a1f74810)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
